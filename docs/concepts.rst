Concepts
========

What is it?
-----------

Talon is a system for periodically running jobs that have constraints.

A :ref:`job <job>` will be :ref:`run <run>` for a :ref:`period <period>`
when :ref:`triggered <trigger>`, but will block until all its
:ref:`constraints <constraint>` have been met and it can been allocated
suitable :ref:`resources <resource>`.

The :ref:`schedule <schedule>` contains details of jobs to be run and any context needed
to run them. :ref:`Periods <period>` and the :ref:`runs <run>` and :ref:`artifacts <artifact>`
that occur within them are stored in the :ref:`state store <state>` along with details
of the :ref:`resources <resource>` currently available to the system.

:ref:`Configuration <config>` specifies what implementations to use for for the
schedule, state and scheduler along with the types of job, run, period, trigger, constraint
and resource available to the schedule.

Anti-goals
----------

Talon does not aim to do any of the following:

- Get software, including itself, to where executors need it.

- Get data used by jobs run by executors to those executors.

- Implementation of executors is not the focus, managing constraints and state
  is the focus.

.. _job:

Job
---

Attributes

- name
- poll frequency - how long to wait between checking if constraints have been
  met (default to once a minute)

.. _run:

Run
---

- job
- period
- executor
- started
- :ref:`progress`
- finished

The executor indicates who 'owns' the job.

Each run may produce zero or more ref:`artifacts <artifact>`.

.. _artifact:

Artifacts
---------

- artifacts are identified by a url giving their location
- each artifact is associated with a period and a run
- could be a file, or some data

.. _progress:

Progress
--------

Run progress has a state that is one of the following:

- blocked - triggered, but one or more constraints have not been met
- ready - constraints have been met
- running - an executor is executing this run
- succeeded
- failed
- skipped - cancelled by a constraint

When running, progress may be expressed as:

- percentage-based
- duration-based
- item-based

When item-based, each item may also have a state.

.. _period:

Period
------

Attributes:

- type
- start
- environment?

Types:

- daily
- weekly
- monthly
- quarterly
- one shot?

.. _constraint:

Constraint
----------

Types:

- start by
- once other specified job has completed
- not more than one successful run in a period
- not more than one instance can be running at once
- not more than one instance can be blocked at once

When checked, contraints will return one of the following actions to take:

- block - this constraint has not been met
- fail - this constraint can never be met and the run should be failed
- pass - this constraint has been met.
- cancel - this constraint has indicated that the current run should be skipped

.. _resource:

Resources
---------

- host of a specific type
- a particular environment?
- actively generated by a job? (or should those be artifacts?)
- resource within a period?
- resource within an environment?
- resources are namespaced, think of them as a nest dictionary hierarchy

.. _trigger:

Trigger
-------

These create the :ref:`run <run>`.

Examples:

- extended cron-style, eg:
  "every 15 minutes between 7-10am, hourly until 4pm,
  every 5 minutes between 4-5pm"

- external

- prior job run completed

.. _executor:

Executor
--------

- SGE
- SSH
- in-process
- Remote node.

.. _schedule:

Schedule
--------

- jobs
- parameters for jobs:
  - simple data
  - complex data?
  - artifact specifications?

.. _state:

State
-----

Stores information about the runs of jobs.

.. _config:

Config
------

- config for state store
- config for config2 store
- types of resource, constraint, etc
- auth data sources
